from flask import Flask, request, render_template, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash
import random
from datetime import datetime, timedelta
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import logging

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # Veritabanı yapılandırması
app.secret_key = 'your_secret_key'  # Güvenlik anahtarınızı değiştirin
db = SQLAlchemy(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    reset_token = db.Column(db.String(128))
    reset_token_expiry = db.Column(db.DateTime)

logger = logging.getLogger(__name__)

@app.route('/forgot-password', methods=['GET', 'POST'])
def forgot_password():
    try:
        if request.method == 'POST':
            email = request.form.get('email')
            if not email:
                flash('Lütfen e-posta adresinizi girin.', 'danger')
                return redirect(url_for('forgot_password'))

            user = User.query.filter_by(email=email).first()
            if not user:
                # Kullanıcı bulunamadı mesajı
                flash('Bu email ile kayıtlı bir kullanıcı bulunamadı.', 'danger')
                return redirect(url_for('forgot_password'))

            # 4 haneli doğrulama kodu oluşturma
            verification_code = ''.join(random.choices('0123456789', k=4))
            token_expiry = datetime.utcnow() + timedelta(minutes=30)
            user.reset_token = verification_code
            user.reset_token_expiry = token_expiry
            db.session.commit()

            send_verification_email(email, verification_code)
            flash('Doğrulama kodu e-posta adresinize gönderildi.', 'success')
            return redirect(url_for('reset_code', email=email))

    except Exception as e:
        logger.error(f"Hata: {e}")
        flash('Bir hata oluştu. Lütfen tekrar deneyin.', 'danger')
        return render_template('forgot_password.html')

    return render_template('forgot_password.html')

@app.route('/reset-code', methods=['GET', 'POST'])
def reset_code():
    try:
        email = request.args.get('email', '')
        if request.method == 'POST':
            verification_code = request.form.get('verification_code', '')
            user = User.query.filter_by(email=email).first()

            if user and user.reset_token == verification_code and datetime.utcnow() < user.reset_token_expiry:
                return redirect(url_for('reset_password', email=email))
            flash('Geçersiz doğrulama kodu.', 'danger')
            return redirect(url_for('reset_code', email=email))

    except Exception as e:
        logger.error(f"Hata: {e}")
        flash('Bir hata oluştu. Lütfen tekrar deneyin.', 'danger')
    
    return render_template('reset_code.html', email=email)

@app.route('/reset-password', methods=['GET', 'POST'])
def reset_password():
    try:
        email = request.args.get('email', '')
        if request.method == 'POST':
            new_password = request.form.get('password')
            user = User.query.filter_by(email=email).first()
            if user:
                user.password = generate_password_hash(new_password)
                db.session.commit()
                flash('Şifre başarıyla değiştirildi!', 'success')
                return redirect(url_for('login'))
            flash("Kullanıcı bulunamadı.", 'danger')

    except Exception as e:
        logger.error(f"Hata: {e}")
        flash('Bir hata oluştu. Lütfen tekrar deneyin.', 'danger')

    return render_template('reset_password.html', email=email)

def send_verification_email(to_email, verification_code):
    sender_email = 'your_email@gmail.com'
    sender_password = 'your_app_password'  # Gmail App Password kullanın

    subject = "Şifre Sıfırlama Kodu"
    html_content = f"""
    <html>
    <body>
        <h2>Şifre Sıfırlama</h2>
        <p>Doğrulama kodunuz: <strong>{verification_code}</strong></p>
    </body>
    </html>
    """
    
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(html_content, 'html'))

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:
            smtp_server.login(sender_email, sender_password)
            smtp_server.send_message(msg)
            logger.info(f"E-posta {to_email} adresine gönderildi.")
            return True
    except Exception as e:
        logger.error(f"E-posta gönderim hatası: {e}")
        return False

if __name__ == '__main__':
    db.create_all()  # Veritabanını oluştur
    app.run(host='0.0.0.0', port=5000)