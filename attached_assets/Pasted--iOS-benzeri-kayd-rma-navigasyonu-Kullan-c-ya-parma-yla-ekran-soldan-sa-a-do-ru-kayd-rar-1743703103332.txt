
/**
 * iOS-benzeri kaydırma navigasyonu
 * Kullanıcıya parmağıyla ekranı soldan sağa doğru kaydırarak önceki sayfaya dönme imkanı sağlar
 */
document.addEventListener('DOMContentLoaded', function() {
  // Durum değişkenleri
  let touchStartX = 0;
  let touchStartY = 0;
  let currentX = 0;
  let startTime = 0;
  let isAnimating = false;
  
  // Minimum kaydırma mesafesi ve süresi
  const minSwipeDistance = 30; // Minimum kaydırma mesafesi (piksel)
  const maxSwipeTime = 300; // Maksimum kaydırma süresi (ms)
  
  // Sayfanın genişliğinin yarısı (otomatik tamamlama için)
  const halfPageWidth = window.innerWidth / 2;
  
  // Animasyon katmanlarını oluştur
  const overlay = document.createElement('div');
  overlay.id = 'swipe-overlay';
  overlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0);
    pointer-events: none;
    transition: background-color 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: 9998;
    will-change: background-color, backdrop-filter;
    -webkit-backdrop-filter: blur(0px);
    backdrop-filter: blur(0px);
    transform: translateZ(0);
  `;
  
  const pageClone = document.createElement('div');
  pageClone.id = 'page-clone';
  pageClone.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: translateX(0);
    opacity: 1;
    overflow: hidden;
    pointer-events: none;
    z-index: 9999;
    box-shadow: 0 0 25px rgba(0, 0, 0, 0.25);
    will-change: transform;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    perspective: 1000px;
    -webkit-perspective: 1000px;
    transform-style: preserve-3d;
    transform: translateZ(0);
  `;
  
  document.body.appendChild(overlay);
  document.body.appendChild(pageClone);
  
  // Kullanıcı arayüzünü bilgilendir
  console.log("iOS kaydırma navigasyonu aktif");
  
  // Navigasyon geçmişini takip et
  let navigationHistory = [];
  
  // Sayfanın daha önce ziyaret edilip edilmediğini kontrol et
  function initializeHistory() {
    // localStorage'dan geçmişi yükle
    try {
      const storedHistory = localStorage.getItem('navigationHistory');
      if (storedHistory) {
        navigationHistory = JSON.parse(storedHistory);
        console.log("Kaydedilmiş gezinme geçmişi yüklendi:", navigationHistory);
      }
    } catch (e) {
      console.error("Gezinme geçmişi yüklenirken hata:", e);
      navigationHistory = [];
    }
    
    console.log("Başlangıç geçmişi:", navigationHistory);
    
    // Link tıklamalarını dinle
    document.addEventListener('click', function(e) {
      const link = e.target.closest('a');
      if (link && link.href && !link.getAttribute('target')) {
        console.log("Bağlantı tıklanması algılandı, geçmiş otomatik güncellenecek");
        // Sayfanın URL'sini geçmişe ekle
        addToHistory(link.href);
      }
    });
    
    // Sayfa yüklendiğinde mevcut URL'yi geçmişe ekle
    window.addEventListener('pageshow', function(e) {
      // Mevcut URL'yi geçmişe ekle
      if (document.referrer) {
        console.log("Referrer geçmişe eklendi:", document.referrer);
        addToHistory(document.referrer);
      }
      
      // Geçmişi güncelle
      if (window.location.href !== navigationHistory[navigationHistory.length - 1]) {
        console.log("Sayfa yüklendi, geçmiş güncellendi:", navigationHistory);
      }
    });
  }
  
  // Geçmişe URL ekle
  function addToHistory(url) {
    console.log("Bağlantı tıklanması ile geçmişe eklendi:", url);
    // Eğer geçmişte son URL ile aynı değilse ekle
    if (navigationHistory.length === 0 || navigationHistory[navigationHistory.length - 1] !== url) {
      navigationHistory.push(url);
      
      // Geçmişi sakla
      try {
        localStorage.setItem('navigationHistory', JSON.stringify(navigationHistory));
      } catch (e) {
        console.error("Gezinme geçmişi saklanırken hata:", e);
      }
    }
  }
  
  // Geçmişteki önceki sayfaya git
  function goBack() {
    if (navigationHistory.length > 1) {
      // Mevcut sayfayı geçmişten çıkar
      navigationHistory.pop();
      
      // Önceki sayfaya git
      const previousPage = navigationHistory[navigationHistory.length - 1];
      console.log("Önceki sayfaya gidiliyor:", previousPage);
      
      // Geçmişi güncelle
      try {
        localStorage.setItem('navigationHistory', JSON.stringify(navigationHistory));
      } catch (e) {
        console.error("Gezinme geçmişi güncellenirken hata:", e);
      }
      
      window.location.href = previousPage;
      return true;
    } else {
      // Geçmişte sayfa yoksa ana sayfaya dön
      console.log("Geçmişte önceki sayfa yok, ana sayfaya dönülüyor");
      window.location.href = '/';
      return false;
    }
  }
  
  // Dokunma başladığında
  function handleTouchStart(e) {
    // Sadece ekranın sol kenarından başlayan dokunmaları kabul et (30px içinde)
    if (e.touches[0].clientX < 30) {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      currentX = touchStartX;
      startTime = new Date().getTime();
      
      // Geçerli sayfanın anlık görüntüsünü al
      const pageSnapshot = document.documentElement.cloneNode(true);
      
      // Clone içeriğini temizle ve sayfa görüntüsünü ekle
      pageClone.innerHTML = '';
      pageClone.appendChild(pageSnapshot);
      
      // Clone'u göster
      pageClone.style.transform = 'translateX(0)';
      pageClone.style.transition = 'none';
      
      // Önceki sayfa için önbellek başlat
      if (navigationHistory.length > 1) {
        loadPreviousPagePreview();
      }
      
      console.log("iOS kaydırma navigasyonu başlatıldı");
    }
  }
  
  // Önceki sayfa görüntüsünü oluştur
  let previousPagePreview = document.createElement('div');
  previousPagePreview.id = 'previous-page-preview';
  previousPagePreview.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: translateX(-20%);
    opacity: 0;
    z-index: 9997;
    background-color: var(--bs-body-bg, #fff);
    color: var(--bs-body-color, #212529);
    transition: transform 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.35s ease;
    overflow: hidden;
    will-change: transform, opacity;
    pointer-events: none;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform-style: preserve-3d;
    perspective: 1000px;
    -webkit-perspective: 1000px;
  `;
  document.body.appendChild(previousPagePreview);
  
  // Önceki sayfanın görüntüsünü yükle - önbellek kullanarak performansı iyileştir
  const pageCache = new Map(); // Sayfa önbelleklemesi için hafıza
  
  async function loadPreviousPagePreview() {
    if (navigationHistory.length > 1) {
      const previousUrl = navigationHistory[navigationHistory.length - 2];
      try {
        // Önceki sayfanın önizlemesini göster - minimal yükleme göstergesi
        previousPagePreview.innerHTML = `
          <div class="previous-page-content" style="height: 100%; width: 100%; background-color: var(--primary-bg, #0a0a18);"></div>
        `;
        
        // Sayfa içeriğini hemen göster, yükleme animasyonu olmadan
        previousPagePreview.style.opacity = '1';
        previousPagePreview.style.transform = 'translate3d(-15%, 0, 0) scale(0.98)';
        
        console.log("Önceki sayfa:", previousUrl);
        return true;
      } catch (e) {
        console.error("Önceki sayfa yüklenirken hata:", e);
        return false;
      }
    }
    return false;
  }
  
  // Dokunma hareket ettiğinde - optimize edilmiş ve daha akıcı
  function handleTouchMove(e) {
    if (touchStartX > 0 && !isAnimating) {
      // Şu anki X pozisyonu
      currentX = e.touches[0].clientX;
      
      // X eksenindeki değişim miktarı
      const deltaX = currentX - touchStartX;
      const deltaY = Math.abs(e.touches[0].clientY - touchStartY);
      
      // Yatay kaydırma miktarı dikey kaydırmadan fazlaysa
      if (deltaX > 0 && deltaX > deltaY) {
        // Kaydırma animasyonunu uygula - hardware acceleration için transform kullan
        requestAnimationFrame(() => {
          // Daha doğal bir ivme ile kaydırma için eğriyi ayarla
          const dampenedDelta = Math.pow(deltaX, 0.95); // Biraz daha lineer hareket
          pageClone.style.transform = `translate3d(${dampenedDelta}px, 0, 0)`;
          
          // iOS tarzında ilerlemeli arka plan efektleri - daha az opacity değişimi
          const progress = deltaX / window.innerWidth;
          const opacity = Math.min(0.3, progress * 0.4); // Daha da hafif gölgelendirme
          overlay.style.backgroundColor = `rgba(0, 0, 0, ${opacity})`;
          
          // Daha az bulanıklık ile performans artışı
          const blurAmount = Math.min(2, progress * 3); // Çok daha az bulanıklık
          if (progress > 0.1) {
            overlay.style.backdropFilter = `blur(${blurAmount}px)`;
            overlay.style.webkitBackdropFilter = `blur(${blurAmount}px)`;
          }
          
          // Önceki sayfayı daha akıcı bir şekilde göster
          const prevPageTranslate = -15 + (progress * 15); // -15% başlangıç, daha yakın konumdan başlat
          previousPagePreview.style.opacity = Math.min(1, progress * 2); // Daha hızlı görünür olsun
          previousPagePreview.style.transform = `translate3d(${prevPageTranslate}%, 0, 0) scale(${0.98 + (progress * 0.02)})`;
        });
        
        // Sayfa kaydırma davranışını engelle
        e.preventDefault();
      }
    }
  }
  
  // Dokunma bittiğinde - daha hızlı ve optimum geçişler
  function handleTouchEnd(e) {
    if (touchStartX > 0 && !isAnimating) {
      // Bitiş zamanı ve pozisyonu
      const endTime = new Date().getTime();
      const touchEndX = e.changedTouches[0].clientX;
      
      // Dokunma süresi ve mesafesi
      const touchDuration = endTime - startTime;
      const touchDistance = touchEndX - touchStartX;
      const swipeSpeed = touchDistance / touchDuration; // Swipe hızı
      
      // Yeterli mesafe veya hız varsa geri dön, yoksa animasyonu resetle
      if ((touchDistance > minSwipeDistance && touchDuration < maxSwipeTime) || 
          touchEndX > halfPageWidth || swipeSpeed > 1.5) {
        
        // Geri dönüş animasyonu - kullanıcının swipe hızına göre süreyi ayarla
        isAnimating = true;
        
        // Daha hızlı animasyon süresi - her zaman 50ms'den az olsun
        const baseSpeed = Math.max(2.0, swipeSpeed);
        const animDuration = Math.max(20, Math.min(50, 200 / baseSpeed)); // 20-50ms aralığında
        
        // Daha lineer ve hızlı animasyon eğrisi
        const animationCurve = 'cubic-bezier(0.25, 0.1, 0.25, 1)'; // Daha hızlı iOS eğrisi
        
        // Geçiş animasyonlarını senkronize et
        pageClone.style.transition = `transform ${animDuration}ms ${animationCurve}`;
        overlay.style.transition = `all ${animDuration}ms ${animationCurve}`;
        previousPagePreview.style.transition = `all ${animDuration}ms ${animationCurve}`;
        
        // Yeni sayfaya geçmeden önce önceki sayfayı hazırla
        requestAnimationFrame(() => {
          // Mevcut sayfayı ekrandan hızlıca çıkar
          pageClone.style.transform = `translate3d(${window.innerWidth}px, 0, 0)`;
          
          // Önceki sayfayı anında tam pozisyona getir
          previousPagePreview.style.opacity = '1';
          previousPagePreview.style.transform = 'translate3d(0, 0, 0) scale(1)';
          
          // Minimum gölge efekti - performans için
          overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
          overlay.style.backdropFilter = 'blur(0px)';
          overlay.style.webkitBackdropFilter = 'blur(0px)';
        });
        
        // Animasyonun bitmesini beklemeden önce bir pre-fetch işlemi başlat
        setTimeout(() => {
          // Pre-fetch - sayfayı API'den almadan hazırla
          if (navigationHistory.length > 1) {
            const previousUrl = navigationHistory[navigationHistory.length - 2];
            const link = document.createElement('link');
            link.rel = 'prerender';
            link.href = previousUrl;
            document.head.appendChild(link);
          }
        }, 50);
        
        // Animasyon tamamlandığında önceki sayfaya git, gecikmeyi azalt
        setTimeout(() => {
          goBack();
          isAnimating = false;
        }, animDuration); // Gecikme olmadan direkt git
      } else {
        // Animasyonu resetle - daha hızlı geri dönüş
        isAnimating = true;
        
        // Daha hızlı geri dönüş
        const returnDuration = 50; // 150ms'den 50ms'ye düşürüldü
        const returnCurve = 'cubic-bezier(0.25, 0.1, 0.25, 1)'; // Daha hızlı eğri
        
        // Tüm animasyonları senkronize et
        pageClone.style.transition = `transform ${returnDuration}ms ${returnCurve}`;
        overlay.style.transition = `all ${returnDuration}ms ${returnCurve}`;
        previousPagePreview.style.transition = `all ${returnDuration}ms ${returnCurve}`;
        
        requestAnimationFrame(() => {
          // Mevcut sayfayı orijinal konumuna geri getir
          pageClone.style.transform = 'translate3d(0, 0, 0)';
          
          // Arka plan efektlerini sıfırla
          overlay.style.backgroundColor = 'rgba(0, 0, 0, 0)';
          overlay.style.backdropFilter = 'blur(0px)';
          overlay.style.webkitBackdropFilter = 'blur(0px)';
          
          // Önceki sayfayı başlangıç konumuna geri getir - daha yakın başlangıç konumundan
          previousPagePreview.style.opacity = '0';
          previousPagePreview.style.transform = 'translate3d(-15%, 0, 0) scale(0.98)';
        });
        
        setTimeout(() => {
          isAnimating = false;
          
          // Durumu sıfırla
          touchStartX = 0;
          currentX = 0;
        }, returnDuration);
      }
    }
    
    // Durumu sıfırla
    touchStartX = 0;
    currentX = 0;
  }
  
  // Pencere Boyutu Değiştiğinde
  window.addEventListener('resize', function() {
    halfPageWidth = window.innerWidth / 2; // Otomatik tamamlama eşiğini güncelle
  });
  
  // Dokunma olaylarını dinle
  document.addEventListener('touchstart', handleTouchStart, { passive: false });
  document.addEventListener('touchmove', handleTouchMove, { passive: false });
  document.addEventListener('touchend', handleTouchEnd, { passive: false });
  
  // Geçmişi başlat
  initializeHistory();
  
  // Gezinme geçmişini güncellemek ve görüntülemek için API
  window.swipeNavigation = {
    getHistory: function() {
      console.log("Gezinme geçmişi:", navigationHistory);
      return [...navigationHistory];
    },
    goBack: goBack,
    disable: function() {
      document.removeEventListener('touchstart', handleTouchStart);
      document.removeEventListener('touchmove', handleTouchMove);
      document.removeEventListener('touchend', handleTouchEnd);
      console.log("Kaydırma navigasyonu devre dışı bırakıldı");
    },
    enable: function() {
      document.addEventListener('touchstart', handleTouchStart, { passive: false });
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('touchend', handleTouchEnd, { passive: false });
      console.log("iOS kaydırma navigasyonu aktif");
    }
  };
});
