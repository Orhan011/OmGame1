/**
 * ZekaPark iOS-Tarzƒ± Swipe Navigasyon
 * Profesyonel S√ºr√ºm v2.2
 * 
 * √ñzellikler:
 * - A‚ÜíB‚ÜíC‚ÜíD gezmesi ile D‚ÜíC‚ÜíB‚ÜíA geriye d√∂n√º≈ü
 * - Geli≈ümi≈ü dokunma algƒ±lama ve kaydƒ±rma fiziƒüi
 * - Hata yakalama ve uyumluluk katmanƒ±
 * - Animasyonlu ge√ßi≈üler ve g√∂rsel geri bildirim
 */

(function() {
    'use strict';
    
    // Yapƒ±landƒ±rma
    const CONFIG = {
        touchThreshold: 15,        // Sol kenardan kaydƒ±rma algƒ±lamasƒ± i√ßin piksel
        swipeThreshold: 50,        // Kaydƒ±rma e≈üik deƒüeri (piksel)
        transitionSpeed: 300,      // Ge√ßi≈ü animasyonu s√ºresi (ms)
        historyStorageKey: 'zekapark_nav_history',  // sessionStorage key
        debug: true                // Debug modunu etkinle≈ütir
    };
    
    // Temel sayfa ge√ßmi≈üi nesnesi
    function createHistoryItem() {
        return {
            path: window.location.pathname,
            title: document.title,
            timestamp: Date.now()
        };
    }
    
    // Konsol Hata Ayƒ±klama
    function debugLog(...args) {
        if (CONFIG.debug) {
            console.log(...args);
        }
    }
    
    // Ba≈ülatma fonksiyonu
    function initializeSwipeBack() {
        try {
            debugLog("üì± iOS Tarzƒ± Swipe Navigasyon ba≈ülatƒ±lƒ±yor...");
            
            // Sayfa ilk y√ºklendiƒüinde ge√ßmi≈ü ba≈ülat veya g√ºncelle
            updateNavigationHistory();
            
            // Kaydƒ±rma g√∂lgesi elementi
            setupSwipeShadow();
            
            // Dokunmatik olaylarƒ±
            setupTouchEvents();
            
            // T√ºm link'leri sayfa ge√ßmi≈üi i√ßin izlemeye al
            trackPageLinks();
            
            // Popstate olayƒ±nƒ± dinle (tarayƒ±cƒ± geri butonu)
            monitorBrowserNavigation();
            
            // Geri butonu elementi
            addBackButton();
            
            debugLog("üì± Swipe Navigasyon hazƒ±r");
        } catch (e) {
            console.warn("Swipe navigasyon ba≈ülatma hatasƒ±:", e);
        }
    }
    
    // Sayfa ge√ßmi≈üini ba≈ülat veya g√ºncelle
    function updateNavigationHistory() {
        try {
            let history = getNavigationHistory();
            const currentPage = createHistoryItem();
            
            // ƒ∞lk ziyaret
            if (!history || history.length === 0) {
                history = [currentPage];
                setNavigationHistory(history);
                debugLog("üè† Ge√ßmi≈ü ba≈ülatƒ±ldƒ± - ƒ∞lk sayfa:", currentPage.path);
                return;
            }
            
            // Son ziyaret edilen sayfa bu sayfa mƒ±?
            const lastPage = history[history.length - 1];
            if (lastPage.path !== currentPage.path) {
                // Farklƒ± sayfa, ge√ßmi≈üe ekle
                history.push(currentPage);
                setNavigationHistory(history);
                debugLog("‚ûï Ge√ßmi≈üe yeni sayfa eklendi:", currentPage.path);
                debugLog("üìú G√ºncel ge√ßmi≈ü:", history.map(h => h.path).join(' ‚Üí '));
            } else {
                debugLog("‚ÑπÔ∏è Aynƒ± sayfa tekrar ziyaret edildi, ge√ßmi≈ü g√ºncellenmedi");
            }
        } catch (err) {
            console.warn("Ge√ßmi≈ü g√ºncelleme hatasƒ±:", err);
        }
    }
    
    // G√∂lge elementi olu≈ütur
    function setupSwipeShadow() {
        try {
            // Varsa mevcut elementi kaldƒ±r
            const existingShadow = document.getElementById('swipe-shadow');
            if (existingShadow) {
                existingShadow.remove();
            }
            
            const shadowOverlay = document.createElement('div');
            shadowOverlay.id = 'swipe-shadow';
            shadowOverlay.className = 'swipe-shadow-overlay';
            document.body.appendChild(shadowOverlay);
            
            // Mobil gezinti g√∂stergesi
            const swipeIndicator = document.createElement('div');
            swipeIndicator.id = 'swipe-indicator';
            swipeIndicator.className = 'swipe-indicator';
            document.body.appendChild(swipeIndicator);
        } catch (e) {
            console.warn("Swipe g√∂lgesi olu≈üturma hatasƒ±:", e);
        }
    }
    
    // Dokunmatik olaylarƒ± kur
    function setupTouchEvents() {
        let startX = 0;
        let currentX = 0;
        let isDragging = false;
        
        // Dokunma ba≈ülangƒ±cƒ±
        document.addEventListener('touchstart', function(e) {
            try {
                // Sol kenarda mƒ±yƒ±z?
                if (e.touches[0].clientX <= CONFIG.touchThreshold) {
                    startX = e.touches[0].clientX;
                    isDragging = true;
                    
                    // G√∂stergeleri hazƒ±rla
                    const shadowOverlay = document.getElementById('swipe-shadow');
                    if (shadowOverlay) {
                        shadowOverlay.style.display = 'block';
                    }
                    
                    const indicator = document.getElementById('swipe-indicator');
                    if (indicator) {
                        indicator.style.opacity = '0.7';
                    }
                }
            } catch (err) {
                console.warn('Dokunma ba≈ülangƒ±√ß hatasƒ±:', err);
            }
        }, { passive: true });
        
        // Dokunma hareketi
        document.addEventListener('touchmove', function(e) {
            if (!isDragging) return;
            
            try {
                currentX = e.touches[0].clientX;
                const delta = currentX - startX;
                
                // Saƒüa doƒüru kaydƒ±rma
                if (delta > 0) {
                    // Sayfayƒ± hareket ettir
                    const movePercent = Math.min(100, (delta / window.innerWidth) * 100);
                    
                    // Fizik kanunlarƒ±na uygun kaydƒ±rma
                    // Hareket giderek yava≈ülar
                    const easedMove = Math.pow(movePercent / 100, 0.7) * 100;
                    
                    document.body.style.transform = `translateX(${easedMove}%)`;
                    document.body.style.transition = 'none';
                    
                    // G√∂lge efekti
                    const shadowOverlay = document.getElementById('swipe-shadow');
                    if (shadowOverlay) {
                        shadowOverlay.style.opacity = (easedMove / 100 * 0.8).toString();
                    }
                    
                    // Varsayƒ±lan kaydƒ±rmayƒ± engelle
                    e.preventDefault();
                }
            } catch (err) {
                console.warn('Dokunma hareketi hatasƒ±:', err);
            }
        }, { passive: false });
        
        // Dokunma biti≈üi
        document.addEventListener('touchend', function() {
            if (!isDragging) return;
            
            try {
                const delta = currentX - startX;
                
                // Ge√ßi≈ü animasyonunu etkinle≈ütir
                document.body.style.transition = `transform ${CONFIG.transitionSpeed/1000}s cubic-bezier(0.165, 0.84, 0.44, 1)`;
                
                // Navigasyon ge√ßmi≈üini al
                const history = getNavigationHistory();
                
                // Yeterince kaydƒ±rƒ±ldƒ± mƒ± ve ge√ßmi≈üte en az 2 sayfa var mƒ±?
                if (delta > CONFIG.swipeThreshold && history && history.length > 1) {
                    // Ge√ßi≈ü animasyonu
                    document.body.style.transform = 'translateX(100%)';
                    
                    // G√∂lge efektini artƒ±r
                    const shadowOverlay = document.getElementById('swipe-shadow');
                    if (shadowOverlay) {
                        shadowOverlay.style.opacity = '0.8';
                    }
                    
                    // Kƒ±sa gecikme ve sonra √∂nceki sayfaya git
                    setTimeout(function() {
                        // Son sayfayƒ± √ßƒ±kar (mevcut sayfa)
                        history.pop();
                        const previousPage = history[history.length - 1];
                        
                        // G√ºncellenmi≈ü ge√ßmi≈üi kaydet
                        setNavigationHistory(history);
                        
                        // √ñnceki sayfaya git
                        debugLog("‚¨ÖÔ∏è √ñnceki sayfaya d√∂n√ºl√ºyor:", previousPage.path);
                        window.location.href = previousPage.path;
                    }, CONFIG.transitionSpeed - 50); // Animasyondan biraz √∂nce
                } else {
                    // Yeterince kaydƒ±rƒ±lmadƒ± - geri al
                    document.body.style.transform = '';
                }
                
                // G√∂lge efektini kapat
                const shadowOverlay = document.getElementById('swipe-shadow');
                if (shadowOverlay) {
                    shadowOverlay.style.opacity = '0';
                    setTimeout(function() {
                        shadowOverlay.style.display = 'none';
                    }, CONFIG.transitionSpeed);
                }
                
                // G√∂stergeyi gizle
                const indicator = document.getElementById('swipe-indicator');
                if (indicator) {
                    indicator.style.opacity = '0';
                }
                
                isDragging = false;
            } catch (err) {
                console.warn('Dokunma biti≈üi hatasƒ±:', err);
                // Stili sƒ±fƒ±rla
                document.body.style.transform = '';
                document.body.style.transition = '';
            }
        });
    }
    
    // Ge√ßmi≈ü i≈ülevleri
    function getNavigationHistory() {
        try {
            const historyData = sessionStorage.getItem(CONFIG.historyStorageKey);
            return historyData ? JSON.parse(historyData) : [];
        } catch (e) {
            console.warn('Navigasyon ge√ßmi≈üi okuma hatasƒ±:', e);
            return [];
        }
    }
    
    function setNavigationHistory(history) {
        try {
            sessionStorage.setItem(CONFIG.historyStorageKey, JSON.stringify(history));
            debugLog("üíæ Navigasyon ge√ßmi≈üi kaydedildi:", history.map(h => h.path).join(' ‚Üí '));
        } catch (e) {
            console.warn('Navigasyon ge√ßmi≈üi yazma hatasƒ±:', e);
        }
    }
    
    // Geri butonu ekle
    function addBackButton() {
        try {
            const history = getNavigationHistory();
            
            // Eƒüer ge√ßmi≈üte en az 2 sayfa varsa (geri d√∂n√ºlebilir) geri butonunu g√∂ster
            if (history && history.length > 1) {
                // Mevcut butonu kaldƒ±r
                const existingButton = document.getElementById('swipe-back-button');
                if (existingButton) {
                    existingButton.remove();
                }
                
                // Yeni butonu ekle
                const backButton = document.createElement('div');
                backButton.id = 'swipe-back-button';
                backButton.className = 'swipe-back-button';
                backButton.setAttribute('aria-label', 'Geri git');
                backButton.setAttribute('role', 'button');
                
                backButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Ge√ßmi≈üten son sayfayƒ± √ßƒ±kar (mevcut sayfa)
                    history.pop();
                    const previousPage = history[history.length - 1];
                    
                    // G√ºncellenmi≈ü ge√ßmi≈üi kaydet
                    setNavigationHistory(history);
                    
                    // √ñnceki sayfaya git
                    debugLog("‚¨ÖÔ∏è Geri butonuna tƒ±klandƒ±, √∂nceki sayfaya d√∂n√ºl√ºyor:", previousPage.path);
                    window.location.href = previousPage.path;
                });
                
                document.body.appendChild(backButton);
                debugLog("üîÑ Geri butonu eklendi, mevcut ge√ßmi≈ü:", history.map(h => h.path).join(' ‚Üí '));
            } else {
                debugLog("‚ÑπÔ∏è Ge√ßmi≈üte yeterli sayfa yok, geri butonu eklenmedi:", history ? history.length : 0);
            }
        } catch (e) {
            console.warn('Geri butonu ekleme hatasƒ±:', e);
        }
    }
    
    // T√ºm sayfadaki linkleri izle
    function trackPageLinks() {
        try {
            document.querySelectorAll('a').forEach(function(link) {
                // Sadece aynƒ± domain ve i≈ülenmemi≈ü linkler
                if (link.hostname === window.location.hostname && 
                    !link.getAttribute('data-swipe-tracked') &&
                    !link.getAttribute('href').includes('javascript:') && 
                    !link.getAttribute('href').includes('#')) {
                    
                    link.setAttribute('data-swipe-tracked', 'true');
                    
                    // Link tƒ±klama olayƒ±
                    link.addEventListener('click', function(e) {
                        // √ñzel durumlarƒ± es ge√ß (ctrl/cmd+click gibi)
                        if (e.ctrlKey || e.metaKey || e.shiftKey) return;
                        
                        try {
                            const targetPath = new URL(link.href).pathname;
                            debugLog("‚úÖ Link tƒ±klandƒ±:", targetPath);
                            
                            // √ñzel durum: Aynƒ± sayfa linki (√∂r. anasayfaya geri d√∂nme)
                            if (targetPath === window.location.pathname) {
                                debugLog("‚ÑπÔ∏è Aynƒ± sayfa linki tƒ±klandƒ±, ge√ßmi≈ü g√ºncellenmedi");
                                return;
                            }
                            
                            // Orijinal ge√ßmi≈üi koru ve yeni hedefi ekle (link tƒ±klamasƒ± √∂ncesinde)
                            const history = getNavigationHistory();
                            const currentPage = createHistoryItem();
                            
                            // Son eklenen sayfa mevcut sayfa deƒüilse, mevcut sayfayƒ± ekle
                            if (history.length === 0 || history[history.length - 1].path !== currentPage.path) {
                                history.push(currentPage);
                            }
                            
                            setNavigationHistory(history);
                            debugLog("üîñ Link tƒ±klamasƒ± √∂ncesi ge√ßmi≈ü g√ºncellendi:", history.map(h => h.path).join(' ‚Üí '));
                        } catch (err) {
                            console.warn('Link tƒ±klama izleme hatasƒ±:', err);
                        }
                    });
                }
            });
            debugLog("üîó Sayfa linkleri takip ediliyor");
        } catch (e) {
            console.warn('Link izleme kurulumu hatasƒ±:', e);
        }
    }
    
    // Tarayƒ±cƒ± ge√ßmi≈üi olaylarƒ±nƒ± izle
    function monitorBrowserNavigation() {
        // Tarayƒ±cƒ± geri butonu
        window.addEventListener('popstate', function(e) {
            try {
                debugLog("‚¨ÖÔ∏è Tarayƒ±cƒ± geri/ileri butonu algƒ±landƒ±");
                
                // Ge√ßmi≈üi g√ºncelle
                const history = getNavigationHistory();
                if (history && history.length > 0) {
                    // Son sayfayƒ± √ßƒ±kar
                    history.pop();
                    setNavigationHistory(history);
                    debugLog("üîÑ Tarayƒ±cƒ± geri tu≈üu sonrasƒ± ge√ßmi≈ü g√ºncellendi:", history.map(h => h.path).join(' ‚Üí '));
                }
            } catch (e) {
                console.warn('Popstate i≈üleme hatasƒ±:', e);
            }
        });
    }
    
    // Sayfa y√ºklendiƒüinde ba≈ülat
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeSwipeBack);
    } else {
        // Sayfa zaten y√ºklendiyse
        initializeSwipeBack();
    }
    
    // Global hata yakalama
    window.addEventListener('error', function(event) {
        // Belirli hatalarƒ± sessiz ≈üekilde ele al (swipe navigasyon ile ilgili olmayan hatalar)
        if (event.error && typeof event.error.message === 'string' && 
            (event.error.message.includes('null is not an object') || 
             event.error.message.includes('Cannot read property') ||
             event.error.message.includes('undefined is not an object'))) {
            console.warn("‚ö†Ô∏è Hata ele alƒ±ndƒ±:", event.error.message);
            event.preventDefault();
        }
    }, true);
})();
