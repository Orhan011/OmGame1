/**
 * ScoreLimiter.js - Puan SÄ±nÄ±rlayÄ±cÄ±
 * 
 * Bu script, tÃ¼m oyunlarÄ±n 10-100 arasÄ±nda puan vermesini saÄŸlar.
 * Backend API'ye gÃ¶nderilen tÃ¼m skorlarÄ± kontrol eder ve istenen aralÄ±ÄŸa getirme iÅŸlemini yapar.
 */
(function() {
  "use strict";
  
  // BaÅŸlangÄ±Ã§ ayarlarÄ±
  const config = {
    minScore: 10,      // Minimum skor deÄŸeri
    maxScore: 100,     // Maksimum skor deÄŸeri
    defaultScore: 50   // VarsayÄ±lan skor deÄŸeri
  };
  
  // GÃ¼venlik Ã¶nlemi iÃ§in boÅŸ bir fetch sÃ¼rÃ¼mÃ¼
  let originalFetch = window.fetch || function() { 
    return Promise.reject(new Error('fetch is not supported')); 
  };
  
  /**
   * BaÅŸlangÄ±Ã§ fonksiyonu
   */
  function initialize() {
    console.log("ğŸ”’ ScoreLimiter baÅŸlatÄ±lÄ±yor...");
    
    // API isteklerini yakala
    interceptFetchAPI();
    interceptXHRAPI();
    
    // Oyun tamamlandÄ± olayÄ±nÄ± dinle
    listenForGameCompleted();
    
    console.log("âœ… ScoreLimiter baÅŸlatÄ±ldÄ±");
  }
  
  /**
   * Fetch API'yi yakala
   */
  function interceptFetchAPI() {
    // EÄŸer Fetch API varsa
    if (typeof window.fetch === 'function') {
      // Orijinal fetch fonksiyonunu sakla
      originalFetch = window.fetch;
      
      // Fetch fonksiyonunu override et
      window.fetch = function() {
        const resource = arguments[0];
        const options = arguments[1] || {};
        
        // Ä°stek URL'sini kontrol et
        if (typeof resource === 'string' && resource.includes('/save-score')) {
          return handleScoreAPIRequest(resource, options, 'fetch');
        } 
        // Request nesnesi kontrolÃ¼
        else if (resource && typeof resource === 'object' && 
                 resource.url && resource.url.includes('/save-score')) {
          return handleScoreAPIRequest(resource.url, options, 'fetch');
        }
        
        // DeÄŸilse normal fetch'i Ã§aÄŸÄ±r
        return originalFetch.apply(this, arguments);
      };
      
      console.log("âœ… Fetch API yakalandÄ±");
    }
  }
  
  /**
   * XMLHttpRequest'i yakala
   */
  function interceptXHRAPI() {
    // EÄŸer XMLHttpRequest varsa
    if (typeof window.XMLHttpRequest === 'function') {
      // Orijinal XMLHttpRequest sÄ±nÄ±fÄ±nÄ± sakla
      const originalXHR = window.XMLHttpRequest;
      
      // XMLHttpRequest'i override et
      window.XMLHttpRequest = function() {
        const xhr = new originalXHR();
        const originalOpen = xhr.open;
        const originalSend = xhr.send;
        
        // Open metodunu yakala
        xhr.open = function() {
          // URL'yi sakla
          this._url = arguments[1];
          return originalOpen.apply(this, arguments);
        };
        
        // Send metodunu yakala
        xhr.send = function() {
          // URL, skor API'si ile ilgiliyse
          if (this._url && typeof this._url === 'string' && this._url.includes('/save-score')) {
            // POST isteÄŸi iÃ§in gÃ¶vde var mÄ± kontrol et
            if (arguments[0]) {
              try {
                // GÃ¶vdeyi parse et
                const body = JSON.parse(arguments[0]);
                // Skor alanÄ±nÄ± limite uygun hale getir
                if (body && typeof body.score !== 'undefined') {
                  body.score = limitScore(body.score);
                  // Yeni gÃ¶vdeyi oluÅŸtur ve isteÄŸi gÃ¶nder
                  return originalSend.call(this, JSON.stringify(body));
                }
              } catch (e) {
                console.error('XHR veri iÅŸleme hatasÄ±:', e);
              }
            }
          }
          
          // Normal send'i Ã§aÄŸÄ±r
          return originalSend.apply(this, arguments);
        };
        
        return xhr;
      };
      
      console.log("âœ… XHR API yakalandÄ±");
    }
  }
  
  /**
   * Skor API isteÄŸini iÅŸle
   */
  function handleScoreAPIRequest(url, options, type) {
    // POST isteÄŸi mi kontrol et
    if (options.method === 'POST' && options.body) {
      try {
        // Body'i parse et
        let body;
        
        if (typeof options.body === 'string') {
          body = JSON.parse(options.body);
        } else if (options.body instanceof FormData) {
          console.warn('FormData formatÄ±ndaki verileri iÅŸleyemiyoruz');
          return originalFetch(url, options);
        } else {
          body = options.body;
        }
        
        // Skoru kontrol et ve sÄ±nÄ±rlandÄ±r
        if (body && typeof body.score !== 'undefined') {
          const originalScore = body.score;
          body.score = limitScore(body.score);
          
          // DeÄŸiÅŸiklik olduysa bildir
          if (originalScore !== body.score) {
            console.log(`ğŸ”„ Skor sÄ±nÄ±rlandÄ±rÄ±ldÄ±: ${originalScore} â†’ ${body.score}`);
          }
          
          // Yeni body oluÅŸtur
          const newOptions = { ...options, body: JSON.stringify(body) };
          
          // API yanÄ±tÄ±nÄ± dinle
          return originalFetch(url, newOptions).then(response => {
            // YanÄ±tÄ± clone'la ve iÅŸle
            const clonedResponse = response.clone();
            
            clonedResponse.json().then(data => {
              // Skorun API tarafÄ±ndan nasÄ±l dÃ¶ndÃ¼ÄŸÃ¼nÃ¼ bildir
              console.log('ğŸ’¯ API yanÄ±tÄ± skor:', data.points?.total || data.score);
              
              // GerÃ§ek skor deÄŸerini yay
              dispatchScoreEvent(data.points?.total || data.score);
            });
            
            return response;
          });
        }
      } catch (e) {
        console.error('Skor API isteÄŸi iÅŸleme hatasÄ±:', e);
      }
    }
    
    // DeÄŸiÅŸiklik yapÄ±lamÄ±yorsa normal fetch'i Ã§aÄŸÄ±r
    return originalFetch(url, options);
  }
  
  /**
   * Bir skoru belirtilen sÄ±nÄ±rlar arasÄ±nda tutma
   */
  function limitScore(score) {
    // SayÄ±sal deÄŸere dÃ¶nÃ¼ÅŸtÃ¼r
    let numericScore = Number(score);
    
    // SayÄ± deÄŸilse varsayÄ±lan deÄŸer kullan
    if (isNaN(numericScore)) {
      return config.defaultScore;
    }
    
    // SÄ±nÄ±rlar iÃ§inde tut
    return Math.max(config.minScore, Math.min(config.maxScore, numericScore));
  }
  
  /**
   * gameCompleted olayÄ±nÄ± dinleme
   */
  function listenForGameCompleted() {
    document.addEventListener('gameCompleted', function(e) {
      if (e.detail && typeof e.detail.score !== 'undefined') {
        // Skoru sÄ±nÄ±rlandÄ±r
        const originalScore = e.detail.score;
        const limitedScore = limitScore(originalScore);
        
        // Skoru gÃ¼ncelle
        e.detail.score = limitedScore;
        
        // DeÄŸiÅŸiklik varsa bildir
        if (originalScore !== limitedScore) {
          console.log(`ğŸ”„ Olay skoru sÄ±nÄ±rlandÄ±rÄ±ldÄ±: ${originalScore} â†’ ${limitedScore}`);
        }
      }
    });
  }
  
  /**
   * GerÃ§ek skor olayÄ±nÄ± yayma
   */
  function dispatchScoreEvent(score) {
    document.dispatchEvent(new CustomEvent('realScoreReceived', {
      detail: { score: score }
    }));
  }
  
  // DÄ±ÅŸa aÃ§Ä±k API
  window.ScoreLimiter = {
    initialize: initialize,
    limitScore: limitScore,
    setScoreLimits: function(min, max) {
      config.minScore = min;
      config.maxScore = max;
    }
  };
  
  // Sayfa yÃ¼klendiÄŸinde baÅŸlat
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
})();