/**
 * ZekaPark - Sayfa Ge√ßmi≈üi Y√∂netim Sistemi
 * Sayfa ge√ßmi≈üini y√∂neten ve kaydeden merkezi sistem
 * v1.0
 */

// Hemen √ßalƒ±≈ütƒ±rƒ±lacak mod√ºl (sayfa y√ºklenmesini beklemez)
const NavigationHistory = (function() {
    'use strict';

    // Yapƒ±landƒ±rma
    const CONFIG = {
        historyStorageKey: 'zekapark_nav_history',
        maxHistoryLength: 20,
        debug: true
    };

    // Ge√ßmi≈üi tutacak array
    let navigationPath = [];
    
    // Konsol log fonksiyonu
    function log(...args) {
        if (CONFIG.debug) {
            console.log(...args);
        }
    }

    // LocalStorage ve SessionStorage ile senkronize ge√ßmi≈ü tutma
    function loadHistory() {
        try {
            // √ñnce localStorage'dan
            let history = localStorage.getItem(CONFIG.historyStorageKey);
            
            // Eƒüer localStorage'da yoksa sessionStorage'dan dene  
            if (!history) {
                history = sessionStorage.getItem(CONFIG.historyStorageKey);
            }
            
            // Parse et ve array olarak d√∂nd√ºr
            return history ? JSON.parse(history) : [];
        } catch (e) {
            console.warn('Ge√ßmi≈ü y√ºkleme hatasƒ±:', e);
            return [];
        }
    }

    // Deƒüi≈üiklikleri t√ºm storage'lara kaydet
    function saveHistory(history) {
        try {
            const historyString = JSON.stringify(history);
            
            // Her iki depolama alanƒ±na da kaydet
            localStorage.setItem(CONFIG.historyStorageKey, historyString);
            sessionStorage.setItem(CONFIG.historyStorageKey, historyString);
            
            log('üîÑ Ge√ßmi≈ü kaydedildi:', history.map(h => h.path).join(' ‚Üí '));
        } catch (e) {
            console.warn('Ge√ßmi≈ü kaydetme hatasƒ±:', e);
        }
    }

    // Sayfa ge√ßmi≈üi item olu≈üturma
    function createHistoryItem() {
        return {
            path: window.location.pathname,
            title: document.title,
            timestamp: Date.now()
        };
    }

    // Ge√ßmi≈üi ekranda g√∂ster (debug i√ßin)
    function showDebugHistory() {
        const history = loadHistory();
        if (history.length > 0) {
            let debugElement = document.getElementById('history-debug');
            if (!debugElement) {
                debugElement = document.createElement('div');
                debugElement.id = 'history-debug';
                debugElement.style.position = 'fixed';
                debugElement.style.bottom = '10px';
                debugElement.style.right = '10px';
                debugElement.style.padding = '8px 12px';
                debugElement.style.background = 'rgba(0,0,0,0.7)';
                debugElement.style.color = 'white';
                debugElement.style.borderRadius = '4px';
                debugElement.style.fontSize = '12px';
                debugElement.style.zIndex = '9999';
                debugElement.style.maxWidth = '80%';
                debugElement.style.pointerEvents = 'none';
                document.body.appendChild(debugElement);
            }
            
            const pathChain = history.map(h => {
                const timeAgo = Math.round((Date.now() - h.timestamp) / 1000);
                return `${h.path} (${timeAgo}s)`;
            }).join(' ‚Üí ');
            
            debugElement.innerHTML = `<strong>Ge√ßmi≈ü:</strong> ${pathChain}`;
        }
    }

    // Ge√ßmi≈üi ba≈ülat
    function initialize() {
        // Mevcut ge√ßmi≈üi y√ºkle
        navigationPath = loadHistory();
        
        // Mevcut sayfa bilgisi
        const currentPage = createHistoryItem();
        
        // Eƒüer ge√ßmi≈ü bo≈üsa, ba≈ülat
        if (navigationPath.length === 0) {
            navigationPath = [currentPage];
            saveHistory(navigationPath);
            log('üìù Ge√ßmi≈ü ba≈ülatƒ±ldƒ±:', currentPage.path);
            return;
        }
        
        // Son ziyaret edilen sayfa mevcut sayfa mƒ± kontrol et
        const lastPage = navigationPath[navigationPath.length - 1];
        
        // Sadece farklƒ± bir sayfaya gittiyse ve son sayfa olarak eklenmemi≈üse ge√ßmi≈üe ekle
        if (lastPage.path !== currentPage.path) {
            // Sayfayƒ± ge√ßmi≈üe ekle
            navigationPath.push(currentPage);
            
            // Ge√ßmi≈ü √ßok uzunsa eski kayƒ±tlarƒ± temizle
            if (navigationPath.length > CONFIG.maxHistoryLength) {
                navigationPath = navigationPath.slice(-CONFIG.maxHistoryLength);
            }
            
            // G√ºncellenmi≈ü ge√ßmi≈üi kaydet
            saveHistory(navigationPath);
            log('‚úÖ Yeni sayfa ge√ßmi≈üe eklendi:', currentPage.path);
            log('üìã G√ºncel ge√ßmi≈ü:', navigationPath.map(h => h.path).join(' ‚Üí '));
        } else {
            log('‚ÑπÔ∏è Zaten ge√ßmi≈üte olan bir sayfa, eklenmedi:', currentPage.path);
        }
        
        // Debug ekranƒ±nƒ± g√∂ster
        if (CONFIG.debug) {
            showDebugHistory();
        }
    }

    // Sayfa linklerini dinleyecek i≈ülev
    function trackPageLinks() {
        try {
            document.querySelectorAll('a[href]').forEach(function(link) {
                // Aynƒ± domain i√ßin ve daha √∂nce i≈ülenmemi≈ü linkler
                if (link.hostname === window.location.hostname && 
                    !link.getAttribute('data-history-tracked') &&
                    !link.getAttribute('href').includes('javascript:') && 
                    !link.getAttribute('href').includes('#')) {
                    
                    link.setAttribute('data-history-tracked', 'true');
                    
                    link.addEventListener('click', function(e) {
                        // √ñzel durumlar (ctrl/cmd+click gibi)
                        if (e.ctrlKey || e.metaKey || e.shiftKey) return;
                        
                        try {
                            // Ge√ßmi≈üi g√ºncelle
                            navigationPath = loadHistory();
                            const targetPath = new URL(link.href).pathname;
                            
                            // Mevcut sayfayƒ± ekle (daha √∂nce eklenmemi≈üse)
                            const currentPage = createHistoryItem();
                            
                            // Mevcut sayfa en son eklenen sayfa deƒüilse, ekle
                            if (navigationPath.length === 0 || 
                                navigationPath[navigationPath.length - 1].path !== currentPage.path) {
                                navigationPath.push(currentPage);
                            }
                            
                            saveHistory(navigationPath);
                            log('üîó Link tƒ±klandƒ±, ge√ßmi≈ü g√ºncellendi. Hedef:', targetPath);
                        } catch (err) {
                            console.warn('Link tƒ±klama ge√ßmi≈ü hatasƒ±:', err);
                        }
                    });
                }
            });
        } catch (e) {
            console.warn('Link izleme hatasƒ±:', e);
        }
    }

    // √ñnceki sayfaya git
    function goBack() {
        navigationPath = loadHistory();
        
        if (navigationPath.length <= 1) {
            log('‚ö†Ô∏è Geri gidilecek sayfa yok, ge√ßmi≈ü bo≈ü veya sadece mevcut sayfa var');
            return false;
        }
        
        // Son sayfayƒ± √ßƒ±kar (o mevcut sayfa)
        navigationPath.pop();
        
        // √ñnceki sayfayƒ± al
        const previousPage = navigationPath[navigationPath.length - 1];
        
        // Ge√ßmi≈üi kaydet
        saveHistory(navigationPath);
        
        log('‚¨ÖÔ∏è √ñnceki sayfaya d√∂n√ºl√ºyor:', previousPage.path);
        
        // Sayfaya git
        window.location.href = previousPage.path;
        return true;
    }

    // API
    return {
        initialize: initialize,
        trackLinks: trackPageLinks,
        goBack: goBack,
        getHistory: loadHistory,
        debug: showDebugHistory
    };
})();

// Sayfa y√ºklendiƒüinde ge√ßmi≈üi ba≈ülat
document.addEventListener('DOMContentLoaded', function() {
    // Ge√ßmi≈üi ba≈ülat
    NavigationHistory.initialize();
    
    // Linkleri takip et
    NavigationHistory.trackLinks();
});

// Bu script'i head i√ßinde √ßalƒ±≈ütƒ±rƒ±yoruz, bu y√ºzden sayfa tamamen y√ºklenmeden de √ßalƒ±≈ümalƒ±
// ƒ∞lk √ßalƒ±≈üma
if (document.readyState !== 'loading') {
    // DOMContentLoaded zaten tetiklendi
    NavigationHistory.initialize();
} else {
    // Sayfa hen√ºz y√ºklenmedi, olayƒ± bekle
    setTimeout(function() {
        NavigationHistory.initialize();
    }, 0);
}
